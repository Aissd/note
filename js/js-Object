1、Object.freeze()

```
const obj = {
	host: 'http://localhost',
	port: 80
};
Object.freeze(obj);
obj.port = 8080; // 无法修改，但不会报错，如果需要有提示，可以使用严格模式 "use strict" 声明。
```

2、Object.hasOwnProperty() - 查找当前对象是否有某些属性 - 不查找原型链

3、attr in object - 查找当前对象和原型链

4、改变原型 - Object.setPrototypeOf(a, b) - 把b改成a的原型

5、合并两个对象 - Object.assign() 

6、JSON.stringify(res, null, 2); // null - 保留所有属性，2 - tab两位

7、Object的属性特征 - enumerable: true  -  这样可以被遍历，Object.keys输出来；

8、Object的属性特征 - configurable: true - 这样可以被删除或者是修改配置

9、控制不允许向对象添加属性

```
const user = {};
Object.preventExtensions(user);
user.site = 'aaa'; // 无法添加，严格模式下会报错

if(Object.isExtensible(user)) {} // 可以用这个判断是否可以添加属性
```

10、封闭对象Object.seal(user); - 不允许删除属性，追加属性，定义对象特征

```
Object.isSealed(); // 判断对象是否处于封闭状态
```

11、Object.getOwnPropertyDescriptors(user)  - 获取对象的属性特征

12、冻结对象 - Object.freeze(user); - 不允许删除，修改，追加属性，定义对象特征，遍历

```
Object.isFrozen(user); // 判断是否处于冻结状态
```

13、对象的属性访问器

```
// 访问器伪造属性：
let obj = {
	list: [
		{price: 10},
		{price: 20},
		{price: 30},
		{price: 40}
	],
	get total() {
		return this.list.reduce((total, item) => total + item, 0);
	}
};

console.log(obj.total); // 100
```

14、查找原型（父亲）

```
let obj = {};
Object.getPrototypeof(obj);
```

15、创建一个没有原型的对象

```
// 第一次参数是指定的原型，传null则没有
let obj = Object.create(null, {
	name: {
		value: 'hd'
	}
});
console.log(obj);
```

16、一般是实例调用

```
function User() {}
let user = new User();
user.__proto__.view = function() {
	console.log('123');
}
```

17、prototype一般是对象（Object，Function...）调用

```
User.prototype.show = function() {
	console.log('abc');
}
```

```
let o = {};
o.__proto__ == Object.prototype; // true
```

18、给对象设置原型

```
let hd = { name: 'hd' };
let parent = { name: 'parent' };
Object.setPrototype(hd, parent); // 给hd设置原型，为parent
```

19、super

```
super == this.__proto__
```

